C51 COMPILER V9.60.0.0   MAIN                                                              10/08/2022 15:50:37 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: E:\Keil c51v9.60\C51\BIN\C51.EXE ..\User\main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Source;..\
                    -User) DEBUG OBJECTEXTEND PRINT(.\List\main.lst) TABS(2) OBJECT(.\Output\main.obj)

line level    source

   1          #include  "delay.h"
   2          #include "ps2.h"
   3          #include "stdio.h"
   4          #include "15W4KxxS4.h"
   5          #include "uart.h"
   6          #include "beep.h"
   7          /**********引脚设置***********/
   8          sbit IN1=P2^6;
   9          sbit IN2=P0^2;
  10          sbit IN3=P2^0;
  11          sbit IN4=P2^4;
  12          sbit OUTR=P0^0;
  13          sbit OUTL=P0^1;
  14          sbit led1=P0^6;
  15          sbit led2=P0^7;
  16          sbit ENA =P1^0;
  17          sbit ENB =P1^1;
  18           /*********变量设置**********/
  19          volatile uint8 Flag1=FALSE;
  20          uint8 uart2temp,sig;
  21          int g_carstate = 0;
  22          int pwm_control=0;
  23          int flag=0;
  24          /************函数调用********************/
  25          void TIME0_Init(void);//定时器设置
  26          /************枚举按键状态****************/
  27           enum{
  28            enSTOP = 0,
  29            enRUN,
  30            enBACK,
  31            enLEFT,
  32            enRIGHT,
  33            enTRIANGLE,
  34            enCIRCLE,
  35            enCROSS,
  36            enSQUARE,
  37            enR2,
  38           }enCarState;
  39          /**************定时器设置**************/
  40          void TIME0_Init(void)
  41          {
  42   1          
  43   1          
  44   1        TMOD &= 0xF0;   //设置定时器模式
  45   1        TMOD |= 0x01;   //设置定时器模式
  46   1        TL0 = (65526-1000/1.085)/256;   //设置定时初始值
  47   1        TH0 = 65526-1000/1.085;   //设置定时重载值
  48   1        TR0= 1;       //启动T0工作
  49   1        TF0=0;
  50   1        ET0= 1;       //允许T0中断，定时器中断开
  51   1        EA = 1;         //开总中断
  52   1      }
  53          /********** 串口2初始化函数************/
  54          void Uart2_Init(void)
C51 COMPILER V9.60.0.0   MAIN                                                              10/08/2022 15:50:37 PAGE 2   

  55          { 
  56   1        P_SW2|=S2_S;   //选择P46 P47为串口2
  57   1          
  58   1        S2CON = 0x50;   //8位数据,可变波特率，启动串行接收器  
  59   1        AUXR |= 0x04;   //定时器2时钟为Fosc,即1T
  60   1        T2L = 0xE0;     //设定定时初值
  61   1        T2H = 0xFE;     //设定定时初值
  62   1        AUXR |= 0x10;   //启动定时器2
  63   1        IE2 |= 0x01;    //串口2中断打开
  64   1      }
  65          /**************运动状态函数设定*********/
  66          void run(void)
  67          {
  68   1        IN1=0;
  69   1        IN2=1;
  70   1        IN3=0;
  71   1        IN4=1;
  72   1        led1=0;
  73   1        led2=0;
  74   1        return;
  75   1      }
  76          void back(void)
  77          {
  78   1        IN1=1;
  79   1        IN2=0;
  80   1        IN3=1;
  81   1        IN4=0;
  82   1        led1=1;
  83   1        led2=1;
  84   1        return;
  85   1      }
  86          void left(void)
  87          {
  88   1          IN1=1;
  89   1          IN2=0;
  90   1          IN3=0;
  91   1          IN4=1;
  92   1          led1=0;
  93   1          led2=1;
  94   1        return;
  95   1      }
  96          
  97          void right(void)
  98          {
  99   1         IN1=0;
 100   1         IN2=1;
 101   1         IN3=1;
 102   1         IN4=0;
 103   1         led1=1;
 104   1         led2=0;
 105   1        return;
 106   1      }
 107          void stop(void)
 108          {
 109   1        IN1=0;
 110   1        IN2=0;
 111   1        IN3=0;
 112   1        IN4=0;
 113   1        return;
 114   1      }
 115          /**********串口2中断服务函数********************/
 116          void Uart2() interrupt UART2_VECTOR using 1
C51 COMPILER V9.60.0.0   MAIN                                                              10/08/2022 15:50:37 PAGE 3   

 117          {
 118   1        IE2 &= 0xFE;                     // 串口2中断关闭
 119   1        Flag1=TRUE;                       //接收到数据,接收标识符有效
 120   1      
 121   1        led1=0;                           //串口2指示灯亮，红灯
 122   1          
 123   1        if (S2CON & S2RI)                //串行接收到停止位的中间时刻时，该位置1
 124   1        {
 125   2            S2CON &= ~S2RI;              //清除S2CON寄存器对应S2RI位（该位必须软件清零）
 126   2            uart2temp = S2BUF;       
 127   2         }
 128   1         switch(uart2temp)
 129   1          {
 130   2             case 0x01:   //收到“1”
 131   2             run();
 132   2             delay_ms(300);
 133   2             stop();
 134   2                  break;
 135   2              
 136   2              case 0x02:    //收到“2”
 137   2             back();
 138   2               delay_ms(300);
 139   2              stop();
 140   2                  break;
 141   2              
 142   2              case 3:    //收到“3”
 143   2             left();
 144   2               delay_ms(300);
 145   2              stop();
 146   2                  break;
 147   2              
 148   2              case 4:    //收到“4”
 149   2             right();
 150   2               delay_ms(300);
 151   2              stop();
 152   2                  break;
 153   2              
 154   2              default:
 155   2                  P2=0XFF;
 156   2                  break;
 157   2          }
 158   1        if (S2CON & S2TI)                //在停止位开始发送时，该位置1
 159   1         {
 160   2            S2CON &= ~S2TI;              //清除S2CON寄存器对应S2TI位（该位必须软件清零）
 161   2         }
 162   1         IE2 |= 0x01;                    // 串口2中断打开 
 163   1      }
 164          /**************定时器0中断***************/
 165          void timer0()interrupt 1 
 166          {
 167   1          
 168   1         TL0 = (65526-1000/1.085)/256;    //设置定时初始值
 169   1        TH0 = 65526-1000/1.085;
 170   1          if(pwm_control>10)
 171   1          {
 172   2            pwm_control=0;
 173   2          }
 174   1          if(flag==3)
 175   1          {   
 176   2          if(pwm_control<5)
 177   2          {
 178   3           if(OUTR==0&&OUTL==0)
C51 COMPILER V9.60.0.0   MAIN                                                              10/08/2022 15:50:37 PAGE 4   

 179   3            { 
 180   4             back();  
 181   4            
 182   4            }
 183   3          
 184   3            else if(OUTL==0)
 185   3            {
 186   4      
 187   4              right();
 188   4          
 189   4            }
 190   3            else if(OUTR==0)
 191   3            {     
 192   4            
 193   4            left();
 194   4              
 195   4            }       
 196   3            
 197   3            if(OUTR==1&&OUTL==1)    
 198   3            
 199   3            { 
 200   4              run();
 201   4            }   
 202   3          }
 203   2          else
 204   2          {
 205   3            stop();
 206   3          }
 207   2        
 208   2        }
 209   1        
 210   1         pwm_control++;
 211   1       }
 212          //******************ps2按键控制***************//
 213           void PS2_control()
 214          {
 215   1              //PS2按键变量定义
 216   1              stPS2KeyValue * PS2;
 217   1            
 218   1          PS2 = ReadPS2KeyValue();      //检测手柄按键之后获得的值
 219   1          //由data[3]和data[4]返回来的组合成16位的数组
 220   1          //如data[4]data[3]:当select按下时
 221   1          //FunBtn：0x1111 1111 1111 1110
 222   1          if((PS2->FunBtn & PSB_SELECT) == 0)
 223   1          {
 224   2           
 225   2          }
 226   1          
 227   1          if((PS2->FunBtn & PSB_START) == 0)
 228   1          {
 229   2            
 230   2          }
 231   1           
 232   1          if((PS2->FunBtn & PSB_L3) == 0)
 233   1          {
 234   2            
 235   2             g_carstate = enSTOP;      //将小车定义为停止状态
 236   2          }
 237   1      
 238   1          if((PS2->FunBtn & PSB_R3) == 0)
 239   1          {
 240   2            
C51 COMPILER V9.60.0.0   MAIN                                                              10/08/2022 15:50:37 PAGE 5   

 241   2             g_carstate = enSTOP;      //将小车定义为停止状态
 242   2          }
 243   1      
 244   1          if((PS2->FunBtn & PSB_PAD_UP) == 0)
 245   1          {
 246   2            
 247   2             g_carstate = enRUN;       //将小车定义为前进状态
 248   2          }
 249   1      
 250   1          else if((PS2->FunBtn & PSB_PAD_RIGHT) == 0)
 251   1          {
 252   2             
 253   2             g_carstate = enRIGHT;     //将小车定义为状态右转
 254   2          }
 255   1          else if((PS2->FunBtn & PSB_PAD_DOWN) == 0)
 256   1          {
 257   2            
 258   2            g_carstate = enBACK;       //将小车定义为后退状态
 259   2          }
 260   1          else if((PS2->FunBtn & PSB_PAD_LEFT) == 0)
 261   1          {
 262   2             
 263   2             g_carstate = enLEFT;       //将小车定义为左转状态
 264   2          }
 265   1           else if((PS2->FunBtn & PSB_TRIANGLE) == 0) // 遥控器操作模式
 266   1          {
 267   2              BEEP_on();
 268   2          delay_ms(10);
 269   2            g_carstate= enTRIANGLE;
 270   2             
 271   2          } 
 272   1           
 273   1           else if((PS2->FunBtn & PSB_CIRCLE) == 0) // 声控模式
 274   1          {
 275   2            BEEP_on();
 276   2           delay_ms(10);
 277   2              g_carstate= enCIRCLE;
 278   2          }  
 279   1        
 280   1          else if((PS2->FunBtn & PSB_CROSS) == 0) // 自动避障模式
 281   1          {
 282   2            delay_ms(10);
 283   2             g_carstate= enCROSS;
 284   2          BEEP_on();
 285   2           
 286   2          } 
 287   1           
 288   1          else if((PS2->FunBtn & PSB_SQUARE) == 0)    //停止
 289   1          {
 290   2            g_carstate= enSQUARE;
 291   2          }  
 292   1          else if((PS2->FunBtn & PSB_R2) == 0)
 293   1          {
 294   2            g_carstate= enR2;
 295   2          }
 296   1          else                           //去掉则按下一直执行，加此段则放开停止
 297   1          {
 298   2            g_carstate = enSTOP;        //将小车定义为停止状态
 299   2          }
 300   1          
 301   1        
 302   1      }
C51 COMPILER V9.60.0.0   MAIN                                                              10/08/2022 15:50:37 PAGE 6   

 303          /**********串口2发送数据函数*****************/
 304          void SendDataByUart2(uint8 dat)
 305          {
 306   1          S2BUF = dat;                 //写数据到UART数据寄存器
 307   1          while(!(S2CON&S2TI));        //在停止位没有发送时，S2TI为0即一直等待
 308   1          S2CON&=~S2TI;                //清除S2CON寄存器对应S2TI位（该位必须软件清零）
 309   1      }
 310          /************ 串口2接收到数据后发送出去****************/
 311          void UART2_Tx_Puts(void)
 312          {
 313   1        if(Flag1)      //有新数据通过串口被接收到
 314   1        {
 315   2          
 316   2        
 317   2          IE2 &= 0xFE;                           // 串口2中断关闭 
 318   2          SendDataByUart2(uart2temp);            //发送字符 
 319   2          SendDataByUart2(0x0D);                 //发送换行符
 320   2          SendDataByUart2(0x0A);                 //发送换行符           
 321   2          IE2 |= 0x01;                           // 串口2中断打开                         
 322   2          Flag1=FALSE;                            //清除接收标识符
 323   2        }
 324   1      }
 325           /***********主函数***************/
 326          int main()
 327          { 
 328   1        int i=0;
 329   1        int pwm=0;
 330   1        Uart2_Init();   //串口初始化  
 331   1        TIME0_Init();     //定时器0初始化
 332   1        PS2_Init();     //PS2初始化
 333   1        P0M1 &= 0x3F; P0M0 &= 0x3F;   //设置P0.6，P0.7为准双向口
 334   1        P3M1 &= 0x7F; P3M0 &= 0x7F;   //设置P3.7为准双向口
 335   1        P2M1 &= 0xDF; P2M0 &= 0xDF;   //设置P2.5为准双向口 
 336   1        delay_ms(10); //初始化后延时
 337   1        ENA=1;
 338   1        ENB=1;
 339   1        while (1)
 340   1        { 
 341   2          
 342   2          PS2_control();
 343   2          IN1=0;
 344   2          IN2=0;
 345   2          IN3=0;
 346   2          IN4=0;//电机接收电流置零
 347   2          
 348   2          if(g_carstate==enTRIANGLE)
 349   2          {
 350   3            flag=1;//将遥控器发出的对应模式以flag的形式记录
 351   3          }
 352   2          else if(g_carstate==enCROSS)
 353   2          {
 354   3            flag=3;
 355   3          }
 356   2            else if(g_carstate==enCIRCLE)
 357   2          {
 358   3            flag=2;
 359   3          }
 360   2            else if(g_carstate==enSQUARE)
 361   2          {
 362   3            flag=0;
 363   3          }
 364   2          if(flag==1)
C51 COMPILER V9.60.0.0   MAIN                                                              10/08/2022 15:50:37 PAGE 7   

 365   2          {
 366   3            
 367   3           BEEP_off();
 368   3            EA=1;
 369   3           switch(g_carstate)     
 370   3           {           
 371   4              case enRUN: 
 372   4              {
 373   5                run();
 374   5              }
 375   4                break;  
 376   4             case enBACK: 
 377   4             {
 378   5              back();
 379   5             }
 380   4              break;
 381   4            case enLEFT:
 382   4            {
 383   5              left();
 384   5            }
 385   4            
 386   4            break;       
 387   4            case enRIGHT:
 388   4            {
 389   5              right();
 390   5            }
 391   4              break;  
 392   4            default: 
 393   4            {
 394   5            stop();
 395   5            }
 396   4            break;            
 397   4           }
 398   3         }
 399   2          delay_ms(10);
 400   2         if(flag==2)
 401   2         {
 402   3          
 403   3           BEEP_off();
 404   3           EA=1;
 405   3           ET0=0;//关闭定时器中断
 406   3         }
 407   2         
 408   2         if(flag==3)
 409   2         {
 410   3           BEEP_off();
 411   3           ET0=1;//关闭定时器中断
 412   3           EA=1;
 413   3      
 414   3         }
 415   2        if(flag==0)
 416   2        {
 417   3          
 418   3         stop();
 419   3        }
 420   2        } 
 421   1      }
 422          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    891    ----
C51 COMPILER V9.60.0.0   MAIN                                                              10/08/2022 15:50:37 PAGE 8   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
